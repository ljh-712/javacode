https://blog.csdn.net/qq_41552331/article/details/103514076
csdn链接
内部类

    在java中一个类定义到另一个类或方法里面这样的类称为内部类。分为四种， 实例内部类、静态内部类、 匿名内部类 、本地内部类

1、 实例内部类

class OutClass {
    public int data1=100;
    public static int data2=200;
    public int data3=999;
    class InnerClass {
        public int data1=10;
        //public static int data2=200;
        public int data3=99;

        public InnerClass() {
            System.out.println("InnerClass()");
        }
        public void fun1() {
            System.out.println("data2:"+"="+data2);
            System.out.println("data1:"+"="+data1);
            System.out.println("data1:"+"="+OutClass.this.data1);


        }
    }

}
public class SumClass {
    public static void main(String[] args) {
        OutClass outClass=new OutClass();
        System.out.println(outClass.data1);
        OutClass.InnerClass innerClass=outClass.new InnerClass();
        System.out.println(innerClass.data1);
        
    }
}


在这里插入图片描述
1、实例内部类不能有静态数据成员，除非同时使用 final 和 static 修饰


    2、如何拿到内部类的对象，？
    在外部类的静态方法和外部类以外的其他类中，必须通过外部类的实例创建内部类的实例。
    在这里插入图片描述>上述代码展示了一种方法：
    ①、若要创建内部类的实例，首先要创建外部类的实例；
    A a = new A();
    A.B b = a.new B();
    ②将内部类的方法都设置为static静态的

    3、外部类实例与内部类实例是一对多的关系，也就是说一个内部类实例只对应一个外部类实例，而一个外部类实例则可以对应多个内部类实例。

    4、如果实例内部类 B 与外部类 A 包含有同名的成员 t，则在类 B 中 t 和 this.t 都表示 B 中的成员 t，而 A.this.t 表示 A 中的成员 t。
    

    5、 在外部类中不能直接访问内部类的成员，而必须通过内部类的实例去访问。如果类 A 包含内部类 B，类 B 中包含内部类 C，则在类 A 中不能直接访问类 C，而应该通过类 B 的实例去访问类 C
   

2、静态内部类

class OutClass {
    public int data1=100;
    public  static int data2=200;
    public int data3=999;
    static class InnerClass {
        public int data1=10;
        public static int data2=200;
        public int data3=99;
        OutClass O=null;

        public InnerClass() {
            System.out.println("InnerClass()");
        }
        public InnerClass(OutClass o) {
            O=o;
        }

    public void fun1() {
            System.out.println("data2:"+"="+data2);
            System.out.println("data1:"+"="+data1);
            System.out.println("data1:"+"="+O.data1);


        }
    }

}

   

    1、静态内部类 不能直接访问外部内部类的非静态数据成员
    但是可以间接访问的。


    1.是否能拥有静态成员
    静态内部类可以有静态成员(方法，属性)，而非静态内部类则不能有静态成员(方法，属性)。
    2、访问外部类的成员
    静态内部类只能够访问外部类的静态成员,而非静态内部类则可以访问外部类的所有成员(方法，属性)。
    3.静态内部类和非静态内部类在创建时有区别

3、四种比较

1.成员内部类

（1）该类像是外部类的一个成员，可以无条件的访问外部类的所有成员属性和成员方法（包括private成员和静态成员）；

（2）成员内部类拥有与外部类同名的成员变量时，会发生隐藏现象，即默认情况下访问的是成员内部类中的成员。如果要访问外部类中的成员，需要以下形式访问：【外部类.this.成员变量 或 外部类.this.成员方法】；

（3）在外部类中如果要访问成员内部类的成员，必须先创建一个成员内部类的对象，再通过指向这个对象的引用来访问；

（4）成员内部类是依附外部类而存在的，也就是说，如果要创建成员内部类的对象，前提是必须存在一个外部类的对象；

（5）内部类可以拥有private访问权限、protected访问权限、public访问权限及包访问权限。如果成员内部类用private修饰，则只能在外部类的内部访问；如果用public修饰，则任何地方都能访问；如果用protected修饰，则只能在同一个包下或者继承外部类的情况下访问；如果是默认访问权限，则只能在同一个包下访问。外部类只能被public和包访问两种权限修饰。

2.局部内部类

（1）局部内部类是定义在一个方法或者一个作用域里面的类，它和成员内部类的区别在于局部内部类的访问仅限于方法内或者该作用域内；

（2）局部内部类就像是方法里面的一个局部变量一样，是不能有public、protected、private以及static修饰符的。

3.匿名内部类

（1）一般使用匿名内部类的方法来编写事件监听代码；

（2）匿名内部类是不能有访问修饰符和static修饰符的；

（3）匿名内部类是唯一一种没有构造器的类；

（4）匿名内部类用于继承其他类或是实现接口，并不需要增加额外的方法，只是对继承方法的实现或是重写。

4.内部静态类

（1）静态内部类是不需要依赖于外部类的，这点和类的静态成员属性有点类似；

（2）不能使用外部类的非static成员变量或者方法。
