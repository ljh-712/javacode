循环队列的一个好处是我们可以利用这个队列之前用过的空间。在一个普通队列里，一旦一个队列满了，我们就不能插入下一个元素，即使在队列前面仍有空间。但是使用循环队列，我们能使用这些空间去存储新的值。

你的实现应该支持如下操作：

    MyCircularQueue(k): 构造器，设置队列长度为 k 。
    Front: 从队首获取元素。如果队列为空，返回 -1 。
    Rear: 获取队尾元素。如果队列为空，返回 -1 。
    enQueue(value): 向循环队列插入一个元素。如果成功插入则返回真。
    deQueue(): 从循环队列中删除一个元素。如果成功删除则返回真。
    isEmpty(): 检查循环队列是否为空。
    isFull(): 检查循环队列是否已满。


class MyCircularQueue {
    private int[] array;
    private int front=0;//头
    private int rear=0;//尾
    private int size=0;//元素个数
    private int capacity;//数组初始长度


    /** Initialize your data structure here. Set the size of the queue to be k. */
    public MyCircularQueue(int k) {
        this.capacity=k;
        array=new int[capacity];
    }
    
    /** Insert an element into the circular queue. Return true if the operation is successful. */
    public boolean enQueue(int value) {
        if (isFull()) {
        return false;
    }
   
    rear=(rear+1)%capacity;
     array[rear]=value;
     if(isEmpty()) {
         front=rear;
     }
    size++;
    return true;
    }
    
    /** Delete an element from the circular queue. Return true if the operation is successful. */
    public boolean deQueue() {
        if (isEmpty()) {
      return false;
    }
    front=(front+1)%capacity;
        size--;
        return true;
    }
    
    /** Get the front item from the queue. */
    public int Front() {
      if(isEmpty()) {
              return -1;
         }
         return array[front];
    }
    
    /** Get the last item from the queue. */
    public int Rear() {
         if(isEmpty()) {
              return -1;
         }
         return array[rear];
       
    }
    
    /** Checks whether the circular queue is empty or not. */
    public boolean isEmpty() {
        return size==0;
    }
    
    /** Checks whether the circular queue is full or not. */
    public boolean isFull() {
        return size==capacity;
    }
}