java对象的比较

    我们知道Java中基本类型及其所对应的包装类都可以直接比大小，那么我们自定义类型可以直接比大小吗？结果是不可以，因为标准库不知道类对象里有哪些成员，该找那个成员进行比较。（标准库：java语言定义的规则，大家通过这个规则来操作数据）
    那么该如何实现自定义类的比较？

方法一：重写基类的equals方法

对于用户自定义的类型都继承于Object类，而Object类提供了equal方法，而==默认情况下调用的就是equal方法。该方法的比较规则是：

    直接比较引用变量的地址，没有比较引用变量的内容。**

public class Card {
    public int rank; // 数值
    public String suit; // 花色
    public Card(int rank, String suit) {
        this.rank = rank;
        this.suit = suit;
    }

    @Override
    public boolean equals(Object obj) {
        //自己与自己比较
        if(this==obj) {
            return true;
        }
        //如果obj为空 或者obj不是Card的子类
        if(obj==null||!(obj instanceof Card)) {
            return false;
        }
        // 注意基本类型可以直接比较，但引用类型最好调用其equal方法
        Card c = (Card)obj;
        return rank == c.rank
                && suit.equals(c.suit);
    }
}
class Test {
    public static void main(String[] args) {
        Card c1 = new Card(1, "?");
        Card c2 = new Card(1, "?");
        Card c3 = new Card(2, "?");
        System.out.println(c1.equals(c2));//true
        System.out.println(c1.equals(c3));//false
    }
}



一般情况下重写equal的套路：

    1、如果指向同一个对象，返回true 2、如果传入的为空，或者对象类型不是定义的类型，返回false
    3、按照类的实现目标完成比较，例如这里只要花色和数值一样，就认为是相同的牌
    4、 注意下调用其他引用类型的比较也需要equals，例如这里的 suit 的比较

缺点：只能按照相等比较，不能按照大于，小于，方式进行比较。
方法二：基于comparable接口的比较

comparable是Jdk提供泛型的接口类。源码如下：

public interface Comparable<E> {
// 返回值:
// < 0: 表示 this 指向的对象小于 o 指向的对象
// == 0: 表示 this 指向的对象等于 o 指向的对象
// > 0: 表示 this 指向的对象等于 o 指向的对象
int compareTo(E o);
}

那么对于用户自定义类，如果需要按照大小方式进行比较，就需要在定义类时实现comparable接口，并在类中重写compareTo方法。

public class Card implements Comparable<Card>{
    public int rank; // 数值
    public String suit; // 花色
    public Card(int rank, String suit) {
        this.rank = rank;
        this.suit = suit;
    }


    @Override
    public int compareTo(Card o) {
        if(o==null) {
            return 1;
        }
        return rank-o.rank;
    }
    public static void main(String[] args){
        Card p = new Card(1, "?");
        Card q = new Card(2, "?");
        Card o = new Card(1, "?");
        System.out.println(p.compareTo(o)); // == 0，表示牌相等
        System.out.println(p.compareTo(q));// < 0，表示 p 比较小
        System.out.println(q.compareTo(p));// > 0，表示 q 比较大
    }
}



优点：可以按照自然排序进行比较
缺点：对于代码侵入性比较强，需要修改源代码，如果类是用户自己实现的可以使用，如果类不是自己实现的该方式就不行了。
Compareble是java.lang中的接口类，可以直接使用
