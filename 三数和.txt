 /**
     * 给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，
     * 使得 a + b + c = 0 ？请你找出所有满足条件且不重复的三元组。
     *
     * @param nums
     * @return
     * 算法：排序加双指针
     * 先对数组排序
     * 遍历排序后数组：
     *     若 nums[i]>0nums[i]>0nums[i]>0：因为已经排序好，所以后面不可能有三个数加和等于 000，直接返回结果。
     *     对于重复元素：跳过，避免出现重复解
     *     令左指针 L=i+1，右指针 R=n?1，当 L<R 时，执行循环：
     *         当 nums[i]+nums[L]+nums[R]==0nums[i]+nums[L]+nums[R]==0nums[i]+nums[L]+nums[R]==0，执行循环，判断左界和右界是否和下一位置重复，去除重复解。并同时将 L,RL,RL,R 移到下一位置，寻找新的解
     *         若和大于 000，说明 nums[R]nums[R]nums[R] 太大，RRR 左移
     *         若和小于 000，说明 nums[L]nums[L]nums[L] 太小，LLL 右移
     * 
     */
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> lists=new ArrayList<>();
        Arrays.sort(nums);
        for(int i=0;i<nums.length;i++) {
            if(nums[i]>0) {//排序后的元素如果第一个数大于零，后面也一定大于零，直接返回
                return lists;
            }
            if(i>0&&nums[i]==nums[i-1]) {
                continue;//对于重复元素直接跳过，避免出现重复解
            }
            int cur=nums[i];
            int left=i+1;
            int right=nums.length-1;
            while(left<right) {
                int t=nums[left]+nums[right]+cur;
                if(t==0) {
                    List<Integer> list=new ArrayList<>();
                    list.add(cur);
                    list.add(nums[left]);
                    list.add(nums[right]);
                    lists.add(list);
                    while(left<right&&nums[left]==nums[left+1]) left++;
                    while(left<right&&nums[right]==nums[right-1]) right--;
                    ++left;
                    --right;

                }else if(t<0) {
                    ++left;
                }else {
                    right--;
                }

            }
        }
        return lists;

    }