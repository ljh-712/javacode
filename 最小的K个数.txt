public class 最小的k个数_ {
    /**
     * 方法一：维护一个含有k个数大根堆，这个堆代表目前选出的最小的k个数，
     * 而堆顶元素是堆里最小元素中最大的数。接下来遍历数组看数组当前数是否比堆顶元素小
     * 如果小，吧堆顶元素替换，然后向下调整，如果不小，不进行任何操作，继续遍历下一个数，遍历完成后
     * 堆中k个数就是所有数组中最小的k个数。
     */
    public static int[] getMinKNumsByheap(int[] arr,int k) {
        if(k<1||k>arr.length) {
            return arr;
        }
        int[] kHeap=new int[k];
        for (int i = 0; i < k; i++) {
            heapInsert(kHeap,arr[i],i);
        }
        for (int i = k; i < arr.length; i++) {
            if (arr[i]<kHeap[0]) {
                kHeap[0]=arr[i];
                shiftDown(kHeap,0,k);
            }
        }
        return kHeap;
    }

    private static void shiftDown(int[] kHeap, int parent, int heapSize) {
        int child=parent*2+1;
        while(child<heapSize) {
            if(child+1<heapSize&&kHeap[child+1]>kHeap[child]) {
                child+=1;
            }
            if(kHeap[child]>kHeap[parent]) {
                swap(kHeap,child,parent);
                parent=child;
                child=parent*2+1;
            } else {
                break;
            }
        }
    }


    private static void heapInsert(int[] arr, int value, int i) {
        arr[i]=value;
        while (i>0) {
            int parent=(i-1)>>1;
            if(arr[parent]<arr[i]) {
                swap(arr,parent,i);
                i=parent;
            }else {
                break;
            }
        }

    }

    private static void swap(int[] arr, int parent, int i) {
        int t=arr[parent];
        arr[parent]=arr[i];
        arr[i]=t;
    }

    public static void main(String[] args) {
        int[] arr={5,3,2,4,7,8,1};
        System.out.println(Arrays.toString(getMinKNumsByheap(arr,4)));
    }

}