    public int minDistance(String word1, String word2) {
        //dp[i][j]表示字符串1的长度为i,2的长度为j，1转化为2的最小步数
        int m=word1.length();
        int n=word2.length();
        int[][] dp=new int[m+1][n+1];
        for(int i=1;i<=m;i++) {
            dp[i][0]=dp[i-1][0]+1;//当字符串2长度为0时，1变二只能删除字符
        }
        for(int i=1;i<=n;i++) {
            dp[0][i]=dp[0][i-1]+1;//当1的长度为0时，1变二只能插入
        }
        for(int i=1;i<=m;i++) {
            for(int j=1;j<=n;j++) {//如果该位置字符相等,继续看他们前一位，注意dp[i][j]的含义
                if(word1.charAt(i-1)==word2.charAt(j-1)) {
                    dp[i][j]=dp[i-1][j-1];
                }else{
                    dp[i][j]=Math.min(Math.min(dp[i-1][j],dp[i][j-1]),dp[i-1][j-1])+1;
                }
            }
        }
        return dp[m][n];

    }