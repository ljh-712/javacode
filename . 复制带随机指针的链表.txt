/*
// Definition for a Node.
class Node {
    public int val;
    public Node next;
    public Node random;

    public Node() {}

    public Node(int _val,Node _next,Node _random) {
        val = _val;
        next = _next;
        random = _random;
    }
};
*/
class Solution {
    public Node copyRandomList(Node head) {
        if(head==null) {
            return null;
        }
        //将新老节点串成一个链表
        Node cur=head;
        while(cur!=null) {
            Node node=new Node(cur.val,cur.next,null);
            Node temp=cur.next;
            cur.next=node;
            cur=temp;
        }
        cur=head;
        //处理random;
        while(cur!=null) {
            if(cur.random!=null) {
               cur.next.random=cur.random.next;
            }else {
                cur.next.random=null;
            }
            cur=cur.next.next;
        }
        //拆分链表，cur>代表需要拆分的节点
        cur=head;
        Node newHead=cur.next;
        while(cur.next!=null) {
            Node temp=cur.next;
            cur.next=temp.next;
            cur=temp;
        }
        return newHead;
        
    }
}