给你一个 n 行 m 列的二维网格 grid 和一个整数 k。你需要将 grid 迁移 k 次。

每次「迁移」操作将会引发下述活动：

    位于 grid[i][j] 的元素将会移动到 grid[i][j + 1]。
    位于 grid[i][m - 1] 的元素将会移动到 grid[i + 1][0]。
    位于 grid[n - 1][m - 1] 的元素将会移动到 grid[0][0]。

请你返回 k 次迁移操作后最终得到的 二维网格。

 

示例 1：

输入：grid = [[1,2,3],[4,5,6],[7,8,9]], k = 1
输出：[[9,1,2],[3,4,5],[6,7,8]]

public class Test {
    public static List<List<Integer>> shiftGrid(int[][] arr, int k) {
        List<List<Integer>> R=new ArrayList<>();
        int r=arr.length;
        int c=arr[0].length;
        int len=r*c;//转化的一维数组长度
        int[] ret=new int[r*c];
        for (int i = 0; i <r ; i++) {
            for (int j = 0; j <c; j++) {
                int index=(i*r+j+k)%len;
                ret[index]=arr[i][j];
            }
        }
        int index=0;
        for (int i = 0; i <r; i++) {
            List<Integer> L=new ArrayList<>();
            for (int j = 0; j <c ; j++) {
                L.add(ret[index]);
                index++;
            }
            R.add(L);

        }
        return R;
    }

    public static void main(String[] args) {
        int arr[][]={{1,2,3},{4,5,6},{7,8,9}};
       // System.out.println(func(arr));
        System.out.println(shiftGrid(arr,1));
    }
}